import pandas as pd
import pprint as p
from datetime import date
import calendar
from PyEnhance import Counter
import os
import threading
import json
import sqlite3
import re
Counter = Counter.Counter


def main(ClassName):
    SchoolClasses = ['Algebra', 'Biology', 'English', 'History']

    DataFrames = dict()

    def GetDates():

        global TodaysDate
        global DayName

        TodaysDate = date.today()
        TodaysDate = TodaysDate.strftime("%m/%d/%Y")

        DateForWeekDay = date.today()
        DayName = calendar.day_name[DateForWeekDay.weekday()]

    GetDates()

    def CsvToDF():
        global Algebra
        for ClassName in SchoolClasses:
            with open(f'CSVs/{ClassName}.csv', 'r') as f:
                FileContent = f.read()

            FileContent = FileContent.replace('"', '')
            FileContent = FileContent.split('\n')

            for i in range(6):
                FileContent.pop(0)

            ActivityName = []
            Score = []
            Possible = []
            PercentageEarned = []
            Status = []
            DateRecorded = []
            LastSubmitted = []
            DueDate = []

            for i in FileContent:
                Columns = i.split(',')
                ActivityName.append(Columns[0])
                Score.append(Columns[1])
                Possible.append(Columns[2])
                PercentageEarned.append(Columns[3])
                Status.append(Columns[4])
                DateRecorded.append(Columns[5])
                LastSubmitted.append(Columns[6])
                DueDate.append(Columns[7])

            DataFrame = pd.DataFrame(
                columns=['ActivityName', 'Score', 'Possible', 'PercentageEarned', 'Status', 'DateRecorded',
                         'LastSubmitted', 'DueDate'])

            pd.set_option('display.max_rows', None)
            pd.set_option('display.max_columns', None)
            pd.set_option('display.width', None)
            pd.set_option('display.max_colwidth', None)

            DataFrame['ActivityName'] = ActivityName
            DataFrame['Score'] = Score
            DataFrame['Possible'] = Possible
            DataFrame['PercentageEarned'] = PercentageEarned
            DataFrame['Status'] = Status
            DataFrame['DateRecorded'] = DateRecorded
            DataFrame['LastSubmitted'] = LastSubmitted
            DataFrame['DueDate'] = DueDate

            DataFrames[ClassName] = DataFrame

    CsvToDF()

    def DictMaker():

        global DueDates

        DueDates = {
            'Algebra': [],
            'Biology': [],
            'English': [],
            'History': []
        }

        for ClassName in SchoolClasses:
            for i in DataFrames[ClassName]['DueDate']:
                DueDates[ClassName].append(i)

    DictMaker()

    def GetDueDates(ClassName):

        def PrintDates(ClassName):

            print(f'{ClassName} Due Dates:')

            ClassDueDates = DueDates[ClassName]
            DatesPerLine = 5

            for Date in ClassDueDates:

                Date = str(Date).replace('"', ' ')

                if Counter.Count == 0:
                    Counter.Add()
                    print('\r')
                    print(Date, end=" ")

                if Counter.Count % DatesPerLine == 0:
                    Counter.Add()
                    print('\n')
                    print(Date, end=" ")
                else:
                    Counter.Add()
                    print(Date, end=" ")
            print('\n')

        PrintDates(ClassName)

    def ReturnDueDates(ClassName):
        ClassDueDates = DueDates[ClassName]
        ClassDueDates = list(ClassDueDates)

        return ClassDueDates


    def Planer(ClassName=ClassName):

        global Next7Dates

        def DatePlaning():

            LongMonths = ['01', '03', '05', '07', '08', '10', '12']
            ShortMonths = ['02']

            def LeapYearCheck(year):
                if year % 4 != 0:
                    return False
                elif year % 100 != 0:
                    return True
                elif year % 400 != 0:
                    return False
                else:
                    return True

                # The LeapYearCheck Function Was Generated By Chat GPT

            def DueInTheNext7():
                def DateRange():
                    def SetUp():
                        global DayNumber, YearNumber, MonthMax, MonthNumber, Next7Dates

                        MonthNumber = TodaysDate[:2]
                        DayNumber = TodaysDate[3:5]
                        YearNumber = TodaysDate[6:]

                        YearNumber = int(YearNumber)
                        DayNumber = int(DayNumber)

                        if LeapYearCheck(year=YearNumber) is True:
                            IsLeapYear = True
                            print('Is a leap year')
                            if MonthNumber == '02':
                                print('Setting MonthMax to 29')
                                MonthMax = 29

                            elif TodaysDate[:2] in LongMonths:
                                MonthMax = 31

                            else:
                                MonthMax = 30


                        else:
                            IsLeapYear = False
                            print("Not A Leap Year")
                            if TodaysDate[:2] in LongMonths:
                                MonthMax = 31
                            elif TodaysDate[:2] in ShortMonths:
                                MonthMax = 28
                            else:
                                MonthMax = 30

                        print(f'Month Number: {MonthNumber}')
                        print(f'Day Number: {DayNumber}')
                        print(f'Year Number: {YearNumber}')

                    SetUp()

                    global DayNumber, MonthMax

                    def GetDates():

                        if DayNumber + 7 > MonthMax:

                            global MonthNumber, YearNumber, Next7Dates

                            Next7 = []
                            Next7Dates = []
                            Next7NewMonth = []

                            MaxDif = abs(DayNumber - MonthMax)

                            for i in range(MaxDif + 1):
                                Next7.append(DayNumber + i)

                            for NewDayNumber in Next7:
                                Next7Dates.append(str(TodaysDate).replace(str(DayNumber), str(NewDayNumber)))

                            if MonthMax == 28:
                                for i in range(1, abs(MaxDif - 7)):
                                    NewNumber = f'0{i}'
                                    Next7NewMonth.append(NewNumber)

                            elif MonthMax == 31:
                                for i in range(1, abs(MaxDif - 7)):
                                    NewNumber = f'0{i}'
                                    Next7NewMonth.append(NewNumber)

                            else:
                                for i in range(1, abs(MaxDif - 7)):
                                    NewNumber = f'0{i}'
                                    Next7NewMonth.append(NewNumber)

                            NewMonthNumber = int(MonthNumber) + 1

                            if NewMonthNumber == 13:
                                NewMonthNumber = 1
                                NewYearNumber = int(YearNumber) + 1

                                NewMonthNumber = str(NewMonthNumber)
                                NewMonthNumber = f'0{NewMonthNumber}'
                                NewYearNumber = str(NewYearNumber)

                                for i in Next7NewMonth:
                                    Next7Dates.append(
                                        str(TodaysDate).replace(MonthNumber, NewMonthNumber).replace(str(DayNumber),
                                                                                                     str(i)).replace(
                                            str(YearNumber), NewYearNumber))

                            else:

                                if NewMonthNumber < 10:
                                    NewMonthNumber = f'0{NewMonthNumber}'

                                NewMonthNumber = str(NewMonthNumber)

                                for i in Next7NewMonth:
                                    DateForList = (
                                        str(TodaysDate).replace(MonthNumber, NewMonthNumber).replace(str(DayNumber),
                                                                                                     str(i)))

                                    Next7Dates.append(DateForList)

                        if DayNumber + 7 < MonthMax:
                            Next7 = []
                            Next7Dates = []

                            CurrentMonthNumber = MonthNumber

                            for i in range(7):
                                print(f'New Day Number: {DayNumber + i}')

                                Next7.append(DayNumber + i)

                            for i in Next7:
                                i = str(i)

                                # print(i)

                                # print(f'Todays Date: {TodaysDate}')

                                # print(f'test: {TodaysDate[3:5]}')

                                StringForList = str(TodaysDate).replace(TodaysDate[3:5], i)

                                print(f'String for list Full: {StringForList}')

                                StringForList = StringForList[:6]

                                print(f'String for list: {StringForList}')

                                CheckMonthNumber = str(StringForList[:2])

                                print(CheckMonthNumber)

                                if len(re.findall('[1-9]{1}', str(CheckMonthNumber))) == 1:
                                    CheckMonthNumber = f'0{CheckMonthNumber}'
                                    print("Adding 0 to Month Number")

                                print(CheckMonthNumber)

                                if len(i) == 1:

                                    # print('DayNumber is a single digit number')

                                    NewDayNumber = f'0{i}'

                                    StringForList = f'{CurrentMonthNumber}/{NewDayNumber}/{StringForList[6:]}'
                                    StringForList = f'{StringForList}{str(YearNumber)}'
                                    Next7Dates.append(StringForList)
                                else:
                                    StringForList = f'{StringForList[:3]}{StringForList[3:6]}{StringForList[6:]}'
                                    StringForList = f'{StringForList}{str(YearNumber)}'
                                    Next7Dates.append(StringForList)


                    global GetDateList

                    class GetDateList:
                        def __init__(self):
                            GetDates()
                        def ReturnList(self):

                            return Next7Dates

                    GetDateList = GetDateList()

                    GetDates()
                DateRange()

                global ActivityWithDueDateDict
                ActivityWithDueDateDict = dict()

                def CheckDueDates(ClassName):
                    Next7Dates = GetDateList.ReturnList()

                    print(Next7Dates)

                    ClassDueDates = ReturnDueDates(ClassName=ClassName)

                    DueDates = []

                    for i in ClassDueDates:
                        DueDates.append(str(i).replace('"', ''))

                    DueDatesNext7 = []

                    for Day in Next7Dates:

                        for DueDate in DueDates:

                            if Day in DueDates:

                                if Day == DueDate:
                                    DueDatesNext7.append(Day)

                    ActivityWithDueDateList = []

                    DataFrame = pd.DataFrame(columns=['ActivityName', 'DueDate'])

                    DataFrame['DueDate'] = DataFrames[ClassName]['DueDate'].replace('"', '')
                    DataFrame['ActivityName'] = DataFrames[ClassName]['ActivityName'].replace('"', '')

                    for index, row in DataFrame.iterrows():
                        for i in DueDatesNext7:
                            if row['DueDate'].replace('"', '') == i:

                                if f"On {i}, {row['ActivityName']} is due." not in ActivityWithDueDateList:

                                    ActivityWithDueDateList.append(f"On {i}, {row['ActivityName']} is due.")


                    def WriteToTXT():

                        if os.path.exists(f'School\{ClassName}.txt'):
                            os.remove(f'School\{ClassName}.txt')

                        if len(ActivityWithDueDateList) == 0:
                            String = 'No Assignments Due In The Next 7 Days'

                            if os.path.exists(f'School\{ClassName}.txt'):

                                with open(f'School\{ClassName}.txt', 'a') as f:
                                    f.write(f'{String}\n')
                            else:
                                with open(f'School\{ClassName}.txt', 'x') as f:
                                    f.write(f'{String}\n')

                        else:

                            for i in ActivityWithDueDateList:

                                if os.path.exists(f'School\{ClassName}.txt'):

                                    with open(f'School\{ClassName}.txt', 'a') as f:
                                        f.write(f'{i}\n')
                                else:
                                    with open(f'School\{ClassName}.txt', 'x') as f:
                                        f.write(f'{i}\n')
                            ActivityWithDueDateDict[ClassName] = ActivityWithDueDateList
                            # print(ActivityWithDueDateDict[ClassName])

                    WriteToTXT()

                CheckDueDates(ClassName=ClassName)
            DueInTheNext7()
        DatePlaning()
    Planer(ClassName=ClassName)
def TimePlaner():

    def TimePlanerMain():

        def Basics():

            SchoolClasses = ['Algebra', 'Biology', 'English', 'History']
            AssignmentCounter = 0
            for Classes in SchoolClasses:
                with open(f'School\{Classes}.txt', 'r') as f:
                    FileContent = f.readlines()

                AssignmentCounter += len(FileContent)

            if AssignmentCounter == 0:
                print('No Assignments Due In The Next 7 Days')
            else:
                print(f'{AssignmentCounter} Assignments Due In The Next 7 Days')
        Basics()



        def CalenderOut():

            def SortDates():

                def GetDates():
                    global DateToName
                    DayNameList = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

                    GetDateList.ReturnList()
                    global Next7Dates
                    TodaysDate = date.today()
                    TodaysDate = TodaysDate.strftime("%m/%d/%Y")

                    DateForWeekDay = date.today()
                    DayName = calendar.day_name[DateForWeekDay.weekday()]

                    print(f'Today is {DayName}, {TodaysDate}')
                    print('\n')

                    DateToName = dict()

                    StartingIndex = DayNameList.index(DayName)


                    for i in range(7):
                        DateToName[Next7Dates[i]] = DayNameList[StartingIndex]
                        StartingIndex += 1

                        if StartingIndex == 7:
                            StartingIndex = 0

                    print(DateToName)

                def MakeCalendar():

                    SchoolAssignments = dict()
                    CalendarItems = dict()


                    PreAllClasses = []

                    AllClasses = []

                    for ClassName in SchoolClasses:
                        with open(f'School\{ClassName}.txt', 'r') as f:
                            FileContent = f.readlines()
                            PreAllClasses.append(FileContent)

                    for i in range(len(PreAllClasses)):
                        for Items in PreAllClasses[i]:
                            AllClasses.append(Items)

                    for Items in AllClasses:

                        String = Items[3:]

                        Date = String[:10]

                        Assignment = String[12:]

                        if Date not in SchoolAssignments:
                            SchoolAssignments[Date] = [Assignment]
                        else:
                            SchoolAssignments[Date].append(Assignment)

                    Data = {}

                    for DueDate in SchoolAssignments.keys():
                        for Date in DateToName:

                            if DueDate == Date:
                                Name = DateToName[Date]
                                Data[Name] = SchoolAssignments[DueDate]

                    DayNameList = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']


                    for Name in DayNameList:
                        if Name not in Data.keys():
                            Data[Name] = ['No Assignment Due Today']

                    DaysOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

                    SortedData = {}
                    for Day in DaysOrder:
                        if Day in Data:
                            SortedData[Day] = Data[Day]
                    Data = SortedData
                    #print(type(Data))
                    #print(Data)
                    #print(Data.keys())

                    for Name in Data.keys():

                        #print(f'{Name}\n')

                        Assignments = Data[Name]
                        Assignments = str(Assignments)
                        for Assignment in Assignments.split(','):


                            Assignment = (str(Assignment).replace('[',']').replace(']', '')
                            .replace("'", '').replace(',', '\n')
                            .replace('No Assignment Due Today', 'No Assignment Due Today\n')).replace('\\n', '')


                    def MakeJson():

                        JSONDataDict = {'Monday': [], 'Tuesday': [], 'Wednesday': [], 'Thursday': [], 'Friday': [], 'Saturday': [], 'Sunday': []}
                        for Day in Data:
                            for Assignment in Data[Day]:

                                JSONData = {

                                            'Assignment': Assignment.replace('\n', ''),

                                            'Done': 0

                                            }

                                JSONDataDict[Day].append(JSONData)


                        with open('data.json', 'a', encoding='utf-8') as f:
                           json.dump(JSONDataDict, f, ensure_ascii=False, indent=4)


                        DataForDump = Data

                        with open('data.json', 'w', encoding='utf-8') as f:
                            json.dump(DataForDump, f, ensure_ascii=False, indent=4)

                        with open('data.json', 'r') as f:
                            data = json.load(f)

                        p.pprint(data)

                    MakeJson()

                    def MakeSQL():

                        if os.path.exists('Assignments.db'):
                            os.remove('Assignments.db')

                        with open('Assignments.db', 'x') as f:
                            print('Created Assignments.db')

                        Con = sqlite3.connect('Assignments.db')

                        Cur = Con.cursor()

                        DaysOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

                        for Day in DaysOrder:

                            Table = f'{Day}'

                            print(f'Table Name: {Table}')


                            Cur.execute(
                                f'CREATE TABLE IF NOT EXISTS {Table} (DATE TEXT, DATENUMBER TEXT, ASSIGNMENT TEXT, DONE TEXT)')

                            Cur.execute(f'DELETE FROM {Table}')

                        for Day in DaysOrder:
                            DayNumber = list(DateToName.keys())[list(DateToName.values()).index(Day)]

                            DayName = Data[Day]

                            for Assignment in DayName:

                                Table = Day

                                Assignment = (str(Assignment).replace('[', ']').replace(']', '')
                                              .replace("'", '').replace(',', '\n')
                                              .replace('No Assignment Due Today', 'No Assignment Due Today\n')).replace(
                                    '\\n', '')

                                Cur.execute(f"INSERT INTO {Table} (DATE, DATENUMBER, ASSIGNMENT, DONE) VALUES (?, ?, ?, 0)",
                                            (Day, DayNumber, Assignment))

                                Con.commit()



                        Con.commit()

                    MakeSQL()
                GetDates()
                MakeCalendar()

            SortDates()

        CalenderOut()
    TimePlanerMain()


if __name__ == '__main__':

    SchoolClasses = ['Algebra', 'Biology', 'English', 'History']

    threads = []


    for i in SchoolClasses:

        if os.path.exists('data.json'):
            os.remove('data.json')

        t = threading.Thread(target=main, args=(i,))
        threads.append(t)

        t.start()
        t.join()

    TimePlaner()

